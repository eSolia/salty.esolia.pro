<!DOCTYPE html>
<html lang="{{ lang }}">
  <head>
    <title>{{ meta.title }}</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta
      property="og:title"
      content="{{ meta.ogTitle }}"
    >
    <meta property="og:url" content="https://salty.esolia.pro/">
    <meta
      property="og:description"
      content="{{ meta.ogDescription }}"
    >
    <!-- Tailwind CSS - Note: Dynamic CDN doesn't support SRI, consider using a specific version -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Phosphor Icons -->
    <link
      rel="stylesheet"
      type="text/css"
      href="https://cdn.jsdelivr.net/npm/@phosphor-icons/web@2.1.1/src/duotone/style.css"
    />
    <!-- Fathom - beautiful, simple website analytics -->
    <script
      src="https://cdn.usefathom.com/script.js"
      data-site="SIBMOOOY"
      defer
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    ></script>
    <!-- / Fathom -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <style>
      /* IBM Plex Sans JP font */
      @import url("https://fonts.googleapis.com/css2?family=IBM+Plex+Sans+JP:wght@300;400;500;600;700&display=swap");
      body {
        font-family: "IBM Plex Sans JP", sans-serif;
      }
      /* Hide browser's native password reveal button */
      input[type="password"]::-ms-reveal,
      input[type="password"]::-ms-clear,
      input[type="password"]::-webkit-textfield-decoration-container {
        display: none;
      }
      /* For Edge specifically */
      input::-ms-reveal,
      input::-ms-clear {
        display: none;
      }
      /* Custom styles for the message box */
      .message-box {
        position: fixed;
        top: 20px;
        left: 50%;
        transform: translateX(-50%);
        background-color: #4caf50; /* Green */
        color: white;
        padding: 15px 20px;
        border-radius: 8px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        z-index: 1000;
        opacity: 0;
        transition: opacity 0.5s ease-in-out;
      }
      .message-box.show {
        opacity: 1;
      }
      .message-box.error {
        background-color: #f44336; /* Red */
      }

      /* Modal styles */
      .modal {
        position: fixed;
        z-index: 1001;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0, 0, 0, 0.4);
        display: flex;
        justify-content: center;
        align-items: center;
      }
      .modal-content {
        background-color: #fefefe;
        margin: auto;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
        max-width: 90%;
        max-height: 90%;
        overflow-y: auto;
        position: relative;
      }
      .close-button {
        color: #aaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
        position: absolute;
        top: 10px;
        right: 20px;
      }
      .close-button:hover,
      .close-button:focus {
        color: black;
        text-decoration: none;
        cursor: pointer;
      }
      .toggle-password {
        position: absolute;
        right: 15px;
        top: 50%;
        transform: translateY(-50%);
        cursor: pointer;
        padding: 5px;
        display: none;
      }
      .toggle-password.show {
        display: block;
      }
      /* Password strength indicator styles */
      .strength-bar {
        height: 4px;
        border-radius: 2px;
        transition: width 0.3s ease, background-color 0.3s ease;
      }
      .password-type-btn {
        cursor: pointer;
        user-select: none;
      }
      .password-type-btn.active {
        border-color: #3b82f6;
        background-color: #eff6ff;
      }
      .password-type-btn:not(.active) {
        border-color: #e5e7eb;
        background-color: white;
      }
      .password-type-btn:hover:not(.active) {
        border-color: #d1d5db;
        background-color: #f9fafb;
      }
      /* Password breach warning styles */
      .breach-warning {
        margin-top: 12px;
        padding: 12px;
        background-color: #fef2f2;
        border: 1px solid #fecaca;
        border-radius: 6px;
        display: flex;
        align-items: flex-start;
        gap: 12px;
      }
      .breach-warning-icon {
        flex-shrink: 0;
        color: #dc2626;
        font-size: 20px;
      }
      .breach-warning-content {
        flex: 1;
      }
      .breach-warning-title {
        color: #dc2626;
        font-weight: 600;
        margin-bottom: 4px;
      }
      .breach-warning-text {
        color: #7f1d1d;
        font-size: 0.875rem;
        line-height: 1.4;
      }
      .breach-check-loading {
        margin-top: 8px;
        font-size: 0.875rem;
        color: #6b7280;
        display: flex;
        align-items: center;
        gap: 8px;
      }
      @keyframes spin {
        to {
          transform: rotate(360deg);
        }
      }
      .spinner {
        width: 16px;
        height: 16px;
        border: 2px solid #e5e7eb;
        border-top-color: #3b82f6;
        border-radius: 50%;
        animation: spin 0.8s linear infinite;
      }
    </style>
  </head>

  <body class="bg-gray-100 text-gray-800 flex flex-col min-h-screen">
    <div id="messageBox" class="message-box"></div>

    <!-- Help Modal -->
    <div id="helpModal" class="modal hidden">
      <div class="modal-content max-w-[65ch] mx-auto">
        <span class="close-button">&times;</span>
        <h1 class="text-3xl font-bold mb-4">{{ helpModal.title }}</h1>
        <p class="italic mb-4">{{ helpModal.subtitle }}</p>
        <p class="mb-4">
          {{- helpModal.intro -}}
        </p>
        <h2 class="text-2xl font-semibold mt-6 mb-3">{{ helpModal.encryptTitle }}</h2>
        <ol class="list-decimal list-inside space-y-2 mb-4">
          <li>{{ helpModal.encryptStep1 }}</li>
          <li>{{ helpModal.encryptStep2 }}</li>
          <li>{{ helpModal.encryptStep3 }}</li>
          <li>{{ helpModal.encryptStep4 }}</li>
        </ol>
        <h2 class="text-2xl font-semibold mt-6 mb-3">{{ helpModal.decryptTitle }}</h2>
        <ol class="list-decimal list-inside space-y-2 mb-4">
          <li>{{ helpModal.decryptStep1 }}</li>
          <li>{{ helpModal.decryptStep2 }}</li>
          <li>{{ helpModal.decryptStep3 }}</li>
          <li>{{ helpModal.decryptStep4 }}</li>
        </ol>
        <h2 class="text-2xl font-semibold mt-6 mb-3">{{ helpModal.securityTitle }}</h2>
        <p class="mb-4">{{- helpModal.securityDesc -}}</p>
        <h2 class="text-2xl font-semibold mt-6 mb-3">{{ helpModal.techDetailsTitle }}</h2>
        <p class="mb-4">{{- helpModal.techDetailsDesc -}}</p>
        <h2 class="text-2xl font-semibold mt-6 mb-3">{{ helpModal.ossTitle }}</h2>
        <p class="mb-4">{{- helpModal.ossDesc -}}</p>
        <hr class="my-6 border-gray-300" />
        <p class="text-sm text-gray-600">
          {{- helpModal.acknowledgement |> safe -}}
        </p>
      </div>
    </div>

    <!-- Password Generator Modal -->
    <div id="passwordModal" class="modal hidden">
      <div class="modal-content max-w-2xl">
        <span class="close-button" id="passwordModalClose">&times;</span>
        <h2 class="text-2xl font-bold mb-6">{{ passwordGenerator.modalTitle }}</h2>

        <!-- Password Type Selection -->
        <div class="mb-6">
          <label class="block text-lg font-semibold text-gray-700 mb-3"
          >{{ passwordGenerator.typeLabel }}</label>
          <div class="grid grid-cols-2 gap-3">
            <button
              type="button"
              id="dicewareBtn"
              class="password-type-btn active p-4 border-2 border-blue-500 bg-blue-50 rounded-lg text-center transition"
            >
              <i
                class="ph-duotone ph-dice-five text-2xl mb-2 text-blue-600"
              ></i>
              <div class="font-semibold">{{ passwordGenerator.dicewareTitle }}</div>
              <div class="text-sm text-gray-600">
                {{- passwordGenerator.dicewareDesc -}}
              </div>
            </button>
            <button
              type="button"
              id="randomBtn"
              class="password-type-btn p-4 border-2 rounded-lg text-center transition"
            >
              <i class="ph-duotone ph-shuffle text-2xl mb-2 text-gray-600"></i>
              <div class="font-semibold">{{ passwordGenerator.randomTitle }}</div>
              <div class="text-sm text-gray-600">
                {{- passwordGenerator.randomDesc -}}
              </div>
            </button>
          </div>
        </div>

        <!-- Diceware Options -->
        <div id="dicewareOptions" class="mb-6">
          <label class="block text-sm font-medium text-gray-700 mb-2"
          >{{ passwordGenerator.dicewareOptions.label }}</label>
          <select
            id="dicewareWords"
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-sky-500"
          >
            <option value="3">{{ passwordGenerator.dicewareOptions.option3 }}</option>
            <option value="4" selected>{{ passwordGenerator.dicewareOptions.option4 }}</option>
            <option value="5">{{ passwordGenerator.dicewareOptions.option5 }}</option>
            <option value="6">{{ passwordGenerator.dicewareOptions.option6 }}</option>
          </select>
        </div>

        <!-- Random Password Options -->
        <div id="randomOptions" class="mb-6 hidden">
          <div class="mb-4">
            <label class="block text-sm font-medium text-gray-700 mb-2"
            >{{ passwordGenerator.randomOptions.lengthLabel }}</label>
            <div class="flex items-center gap-3">
              <input
                type="range"
                id="passwordLength"
                min="8"
                max="128"
                value="16"
                class="flex-1"
              >
              <span id="lengthValue" class="w-12 text-center font-mono">16</span>
            </div>
            <p class="text-xs text-gray-500 mt-1">{{ passwordGenerator.randomOptions.lengthHelp }}</p>
          </div>

          <div class="space-y-2">
            <label class="flex items-center">
              <input
                type="checkbox"
                id="includeNumbers"
                checked
                class="mr-2"
              >
              {{ passwordGenerator.randomOptions.includeNumbers }}
            </label>
            <label class="flex items-center">
              <input
                type="checkbox"
                id="includeSymbols"
                checked
                class="mr-2"
              >
              {{ passwordGenerator.randomOptions.includeSymbols }}
            </label>
          </div>

          <div class="mt-4">
            <label class="block text-sm font-medium text-gray-700 mb-2"
            >{{ passwordGenerator.randomOptions.excludeLabel }}</label>
            <input
              type="text"
              id="excludeSymbols"
              placeholder="{{ passwordGenerator.randomOptions.excludePlaceholder }}"
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-sky-500"
            >
            <p class="text-xs text-gray-500 mt-1">
              {{- passwordGenerator.randomOptions.excludeHelp -}}
            </p>
          </div>
        </div>

        <!-- Generated Password Display -->
        <div
          id="generatedPasswordSection"
          class="mb-6 p-4 bg-gray-50 rounded-lg hidden"
        >
          <div class="flex items-center justify-between mb-2">
            <label class="text-sm font-medium text-gray-700"
            >{{ passwordGenerator.generatedPasswordLabel }}</label>
            <button
              type="button"
              id="toggleGeneratedPassword"
              class="text-gray-600 hover:text-gray-800 p-1"
            >
              <i class="ph-duotone ph-eye"></i>
            </button>
          </div>
          <div class="flex items-center gap-2">
            <input
              type="password"
              id="generatedPassword"
              readonly
              class="flex-1 px-3 py-2 font-mono bg-white border border-gray-300 rounded-md"
            >
            <button
              type="button"
              id="copyGeneratedPassword"
              class="px-3 py-2 bg-gray-200 hover:bg-gray-300 rounded-md transition"
            >
              <i class="ph-duotone ph-copy"></i>
            </button>
          </div>

          <!-- Password Strength Indicator for Modal -->
          <div id="modalStrengthIndicator" class="mt-3 hidden">
            <div class="flex items-center justify-between mb-1">
              <span class="text-sm font-medium">
                <span id="modalStrengthLabel"></span>
              </span>
              <span class="text-sm text-gray-600">
                <span id="modalEntropyBits"></span> bits {{ passwordStrength.entropyBits }}
              </span>
            </div>
            <div class="w-full bg-gray-200 rounded-full h-2">
              <div
                id="modalStrengthBar"
                class="strength-bar"
                style="width: 0%"
              ></div>
            </div>
            <div class="text-xs text-gray-500 mt-1">
              {{ passwordStrength.crackTime }}: <span id="modalCrackTime"></span>
            </div>
          </div>
        </div>

        <!-- Action Buttons -->
        <div class="flex gap-3">
          <button
            type="button"
            id="generatePasswordModalBtn"
            class="flex-1 bg-sky-500 text-white py-2 px-4 rounded-md hover:bg-sky-600 transition"
          >
            <i class="ph-duotone ph-arrows-clockwise mr-2"></i>{{ passwordGenerator.generateButton }}
          </button>
          <button
            type="button"
            id="usePasswordBtn"
            class="flex-1 bg-emerald-500 text-white py-2 px-4 rounded-md hover:bg-emerald-600 transition"
          >
            <i class="ph-duotone ph-check-fat mr-2"></i>{{ passwordGenerator.useButton }}
          </button>
        </div>
      </div>
    </div>

    <!-- QR Code Modal -->
    <div id="qrModal" class="modal hidden">
      <div class="modal-content max-w-md text-center">
        <span class="close-button" id="qrModalClose">&times;</span>
        <h2 class="text-2xl font-bold mb-4">{{ qrModal.title }}</h2>
        <div id="qrcode" class="flex justify-center mb-4"></div>
        <p class="text-sm text-gray-600 mb-4">
          {{- qrModal.instructions -}}
        </p>
        <button
          id="closeQrBtn"
          class="bg-gray-500 text-white py-2 px-6 rounded-md hover:bg-gray-600 transition"
        >
          {{ qrModal.closeButton }}
        </button>
      </div>
    </div>

    <header class="bg-sky-600 text-white py-8 px-4">
      <div class="container mx-auto max-w-4xl text-center">
        <h1 class="text-5xl font-bold mb-2">{{ header.title }}</h1>
        <p class="text-xl mb-4 italic">{{ header.subtitle }}</p>
        <p class="mb-4 max-w-[65ch] mx-auto">
          {{- header.intro |> safe -}}
        </p>
        <div class="flex justify-center space-x-4">
          <button
            id="openModalBtn"
            class="bg-sky-500 hover:bg-sky-700 text-white font-semibold py-2 px-4 rounded-lg shadow-md transition duration-300 ease-in-out transform hover:scale-105"
          >
            {{ header.helpButton }}
          </button>
          <a
            href="{{ langPath }}/"
            class="bg-amber-500 hover:bg-amber-600 text-white font-semibold py-2 px-4 rounded-lg shadow-md transition duration-300 ease-in-out transform hover:scale-105"
          >
            {{ header.langSwitch }}
          </a>
        </div>
      </div>
    </header>

    <main class="flex-grow">
      <div class="container mx-auto max-w-4xl px-4 py-8">
        <form id="saltyForm" class="bg-white rounded-lg shadow-lg p-8">
          <div class="mb-6">
            <label
              for="payload"
              class="block text-lg font-semibold text-gray-700 mb-2"
            >{{ form.payloadLabel }}</label>
            <textarea
              id="payload"
              rows="6"
              class="w-full px-4 py-3 text-lg border-2 border-gray-300 rounded-lg focus:outline-none focus:ring-4 focus:ring-sky-300 focus:border-sky-500 transition duration-200 resize-vertical"
              placeholder="{{ form.payloadPlaceholder }}"
            ></textarea>
          </div>
          <div class="mb-6">
            <label
              for="key"
              class="block text-lg font-semibold text-gray-700 mb-2"
            >{{ form.keyLabel }}</label>
            <div class="flex gap-2">
              <div class="flex-1 relative">
                <input
                  type="password"
                  id="key"
                  class="w-full px-4 py-3 pr-12 text-lg border-2 border-gray-300 rounded-lg focus:outline-none focus:ring-4 focus:ring-sky-300 focus:border-sky-500 transition duration-200"
                  placeholder="{{ form.keyPlaceholder }}"
                  autocomplete="off"
                >
                <span class="toggle-password" id="togglePassword">
                  <i class="ph-duotone ph-eye" id="toggleIcon"></i>
                </span>
              </div>
              <button
                type="button"
                id="generatePasswordBtn"
                class="bg-sky-500 text-white py-3 px-4 rounded-lg font-medium shadow-md hover:bg-sky-600 focus:outline-none focus:ring-4 focus:ring-sky-300 transition duration-300 ease-in-out transform hover:scale-105 whitespace-nowrap"
              >
                <i class="ph-duotone ph-key mr-1"></i>{{ form.generatePasswordButton }}
              </button>
            </div>

            <!-- Password Strength Indicator -->
            <div id="strengthIndicator" class="mt-3 hidden">
              <div class="flex items-center justify-between mb-1">
                <span class="text-sm font-medium">
                  <span id="strengthLabel"></span>
                </span>
                <span class="text-sm text-gray-600">
                  <span id="entropyBits"></span> bits {{ passwordStrength.entropyBits }}
                </span>
              </div>
              <div class="w-full bg-gray-200 rounded-full h-2">
                <div
                  id="strengthBar"
                  class="strength-bar"
                  style="width: 0%"
                ></div>
              </div>
              <div class="text-xs text-gray-500 mt-1">
                {{ passwordStrength.crackTime }}: <span id="crackTime"></span>
              </div>
            </div>

            <!-- Breach Warning -->
            <div id="breachWarning" class="breach-warning hidden">
              <i class="ph-duotone ph-warning-diamond breach-warning-icon"></i>
              <div class="breach-warning-content">
                <div class="breach-warning-title">{{ breach.warning }}</div>
                <div class="breach-warning-text" id="breachText"></div>
              </div>
            </div>

            <!-- Breach Check Loading -->
            <div id="breachCheckLoading" class="breach-check-loading hidden">
              <div class="spinner"></div>
              <span>{{ breach.checking }}</span>
            </div>
          </div>
          <div
            class="flex flex-col sm:flex-row gap-4 justify-center items-center"
          >
            <button
              type="submit"
              class="w-full sm:w-1/2 bg-emerald-500 text-white py-3 px-6 rounded-lg font-semibold text-xl shadow-md hover:bg-emerald-600 focus:outline-none focus:ring-4 focus:ring-emerald-300 transition duration-300 ease-in-out transform hover:scale-105"
            >
              <i class="ph-duotone ph-fingerprint mr-2"></i>{{ form.submitButton }}
            </button>
            <button
              type="button"
              id="resetFormBtn"
              class="w-full sm:w-1/2 bg-amber-500 text-white py-3 px-6 rounded-lg font-semibold text-xl shadow-md hover:bg-amber-600 focus:outline-none focus:ring-4 focus:ring-amber-300 transition duration-300 ease-in-out transform hover:scale-105"
            >
              <i class="ph-duotone ph-broom mr-2"></i>{{ form.resetButton }}
            </button>
          </div>
        </form>

        <div
          id="saltyResult"
          class="mt-8 bg-white rounded-lg shadow-lg p-8 hidden"
        >
          <h2 class="text-2xl font-bold mb-4 text-sky-600">
            {{ results.operation }}: <span id="operationType"></span>
          </h2>
          <div class="space-y-4">
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1"
              >{{ results.shareableLabel }}</label>
              <div class="relative">
                <textarea
                  id="shareableCipher"
                  rows="3"
                  class="w-full px-3 py-2 font-mono text-sm bg-gray-50 border border-gray-300 rounded-md resize-none"
                  readonly
                ></textarea>
                <button
                  type="button"
                  class="absolute top-2 right-2 bg-gray-200 hover:bg-gray-300 px-2 py-1 rounded text-sm transition copyBtn"
                  data-target="shareableCipher"
                >
                  {{ results.copyButton }}
                </button>
              </div>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1"
              >{{ results.compressedLabel }}</label>
              <div class="relative">
                <textarea
                  id="compressedCipher"
                  rows="3"
                  class="w-full px-3 py-2 font-mono text-sm bg-gray-50 border border-gray-300 rounded-md resize-none"
                  readonly
                  style="word-wrap: break-word; word-break: break-all;"
                ></textarea>
                <button
                  type="button"
                  class="absolute top-2 right-2 bg-gray-200 hover:bg-gray-300 px-2 py-1 rounded text-sm transition copyBtn"
                  data-target="compressedCipher"
                >
                  {{ results.copyButton }}
                </button>
              </div>
            </div>
            <div id="shareUrlSection" class="hidden">
              <label class="block text-sm font-medium text-gray-700 mb-1"
              >{{ results.shareUrlLabel }}</label>
              <div class="flex gap-2">
                <input
                  type="text"
                  id="shareUrl"
                  class="flex-1 px-3 py-2 font-mono text-sm bg-gray-50 border border-gray-300 rounded-md"
                  readonly
                >
                <button
                  type="button"
                  id="copyShareUrlBtn"
                  class="bg-sky-500 hover:bg-sky-600 text-white px-4 py-2 rounded-md transition"
                >
                  {{ results.shareUrlButton }}
                </button>
                <button
                  type="button"
                  id="showQrBtn"
                  class="bg-gray-500 hover:bg-gray-600 text-white px-4 py-2 rounded-md transition"
                >
                  {{ results.qrButton }}
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </main>

    <footer class="bg-gray-800 text-white py-4 text-center">
      <p class="mb-2">{{ footer.copyright }}</p>
      <a href="https://esolia.com/" target="_blank">
        <img
          src="/img/logo_horiz_white_bgtransparent.svg"
          alt="{{ footer.logoAlt }}"
          class="inline h-12"
        >
      </a>
    </footer>

    <!-- QR Code Library -->
    <script src="https://cdn.jsdelivr.net/npm/qrcodejs@1.0.0/qrcode.min.js"></script>

    <script type="module">
      // Import crypto functions
      import {
        salty_decrypt,
        salty_encrypt,
        salty_key,
      } from "/salty.ts";

      // Import password generator functions
      import {
        calculatePasswordEntropy,
        generatePassword,
        getDefaultExcludedSymbols,
        getExcludedSymbols,
        hasCustomExcludedSymbols,
        initializeDiceware,
        setExcludedSymbols,
      } from "/password-generator.ts";

      // Import password strength analyzer
      import {
        analyzePasswordStrength,
        getStrengthLevel,
      } from "/password-strength.ts";

      // Import HIBP checker
      import { checkPasswordBreach } from "/hibp-checker.ts";

      // Get DOM elements
      const form = document.getElementById("saltyForm");
      const payloadInput = document.getElementById("payload");
      const keyInput = document.getElementById("key");
      const saltyResultDiv = document.getElementById("saltyResult");
      const operationTypeSpan = document.getElementById("operationType");
      const shareableCipherTextarea = document.getElementById(
        "shareableCipher",
      );
      const compressedCipherTextarea = document.getElementById(
        "compressedCipher",
      );
      const shareUrlSection = document.getElementById("shareUrlSection");
      const shareUrlInput = document.getElementById("shareUrl");
      const copyShareUrlBtn = document.getElementById("copyShareUrlBtn");
      const resetFormBtn = document.getElementById("resetFormBtn"); // Get the new reset button
      const togglePassword = document.getElementById("togglePassword");
      const toggleIcon = document.getElementById("toggleIcon");
      const generatePasswordBtn = document.getElementById(
        "generatePasswordBtn",
      );
      let sharingUIMode = false;

      // Password strength elements
      const strengthIndicator = document.getElementById("strengthIndicator");
      const strengthLabel = document.getElementById("strengthLabel");
      const strengthBar = document.getElementById("strengthBar");
      const entropyBits = document.getElementById("entropyBits");
      const crackTime = document.getElementById("crackTime");

      // Breach check elements
      const breachWarning = document.getElementById("breachWarning");
      const breachText = document.getElementById("breachText");
      const breachCheckLoading = document.getElementById("breachCheckLoading");
      let breachCheckTimer = null;

      // Modal elements
      const passwordModal = document.getElementById("passwordModal");
      const passwordModalClose = document.getElementById("passwordModalClose");
      const dicewareBtn = document.getElementById("dicewareBtn");
      const randomBtn = document.getElementById("randomBtn");
      const dicewareOptions = document.getElementById("dicewareOptions");
      const randomOptions = document.getElementById("randomOptions");
      const passwordLength = document.getElementById("passwordLength");
      const lengthValue = document.getElementById("lengthValue");
      const includeNumbers = document.getElementById("includeNumbers");
      const includeSymbols = document.getElementById("includeSymbols");
      const excludeSymbols = document.getElementById("excludeSymbols");
      const generatePasswordModalBtn = document.getElementById(
        "generatePasswordModalBtn",
      );
      const generatedPasswordSection = document.getElementById(
        "generatedPasswordSection",
      );
      const generatedPassword = document.getElementById("generatedPassword");
      const toggleGeneratedPassword = document.getElementById(
        "toggleGeneratedPassword",
      );
      const copyGeneratedPassword = document.getElementById(
        "copyGeneratedPassword",
      );
      const usePasswordBtn = document.getElementById("usePasswordBtn");

      // Modal strength indicator elements
      const modalStrengthIndicator = document.getElementById(
        "modalStrengthIndicator",
      );
      const modalStrengthLabel = document.getElementById("modalStrengthLabel");
      const modalStrengthBar = document.getElementById("modalStrengthBar");
      const modalEntropyBits = document.getElementById("modalEntropyBits");
      const modalCrackTime = document.getElementById("modalCrackTime");

      // QR Modal elements
      const qrModal = document.getElementById("qrModal");
      const qrModalClose = document.getElementById("qrModalClose");
      const showQrBtn = document.getElementById("showQrBtn");
      const closeQrBtn = document.getElementById("closeQrBtn");
      let qrcode = null;

      // i18n translations - using Vento variables
      const i18n = {
        messages: {{- messages |> jsonStringify |> safe -}},
        passwordStrength: {{- passwordStrength |> jsonStringify |> safe -}},
        breach: {{- breach |> jsonStringify |> safe -}},
        results: {{- results |> jsonStringify |> safe -}}
      };

      // Initialize diceware on page load
      await initializeDiceware();

      /**
       * Detects if the given text is a Salty cipher
       * @param {string} text - Text to check
       * @returns {boolean} True if the text appears to be a Salty cipher
       */
      function isSaltyCipher(text) {
        const trimmedText = text.trim();

        // Check for the full format with header and footer
        if (
          trimmedText.includes("-----BEGIN SALTY MESSAGE-----") &&
          trimmedText.includes("-----END SALTY MESSAGE-----")
        ) {
          return true;
        }

        // Check if it looks like a compressed basE91 cipher
        // Salty ciphers have specific basE91 characters and minimum length
        const basE91Regex = /^[A-Za-z0-9!#$%&()*+,./:;<=>?@\[\\\]^_`{|}~"-]+$/;
        const looksLikeBasE91 = basE91Regex.test(trimmedText) &&
          trimmedText.length >= 44; // Minimum for IV + tag + some ciphertext

        return looksLikeBasE91;
      }

      /**
       * Shows a message box with the given message
       * @param {string} message - Message to display
       * @param {boolean} isError - Whether the message is an error
       */
      function showMessageBox(message, isError = false) {
        const messageBox = document.getElementById("messageBox");
        messageBox.textContent = message;
        messageBox.classList.toggle("error", isError);
        messageBox.classList.add("show");

        setTimeout(() => {
          messageBox.classList.remove("show");
        }, 3000);
      }

      /**
       * Updates the password strength indicator
       */
      function updatePasswordStrength(password, indicatorElements) {
        if (!password || sharingUIMode) {
          indicatorElements.container.classList.add("hidden");
          return;
        }

        const strength = analyzePasswordStrength(password);
        const level = getStrengthLevel(strength.score);

        indicatorElements.container.classList.remove("hidden");
        indicatorElements.label.textContent = i18n.passwordStrength[
          level.label.toLowerCase().replace(" ", "")
        ] || level.label;
        indicatorElements.bar.style.width = `${(strength.score + 1) * 20}%`;
        indicatorElements.bar.style.backgroundColor = level.color;
        indicatorElements.entropy.textContent = Math.round(strength.entropy);
        indicatorElements.crackTime.textContent = strength.crackTimeDisplay;
      }

      /**
       * Checks if a password has been breached
       */
      async function checkBreach(password) {
        if (!password || sharingUIMode) {
          breachWarning.classList.add("hidden");
          breachCheckLoading.classList.add("hidden");
          return;
        }

        // Clear any existing timer
        if (breachCheckTimer) {
          clearTimeout(breachCheckTimer);
        }

        // Show loading state
        breachWarning.classList.add("hidden");
        breachCheckLoading.classList.remove("hidden");

        // Debounce the check
        breachCheckTimer = setTimeout(async () => {
          try {
            const breachCount = await checkPasswordBreach(password);
            breachCheckLoading.classList.add("hidden");

            if (breachCount > 0) {
              const warningText = i18n.breach.warningText.replace(
                "{{'{{'}}count}}",
                breachCount.toLocaleString(),
              );
              breachText.textContent = warningText;
              breachWarning.classList.remove("hidden");
            } else {
              breachWarning.classList.add("hidden");
            }
          } catch (error) {
            console.error("Breach check failed:", error);
            breachCheckLoading.classList.add("hidden");
          }
        }, 500);
      }

      // Update strength indicator when password changes
      keyInput.addEventListener("input", (e) => {
        const password = e.target.value;

        // Main form indicator
        updatePasswordStrength(password, {
          container: strengthIndicator,
          label: strengthLabel,
          bar: strengthBar,
          entropy: entropyBits,
          crackTime: crackTime,
        });

        // Check for breaches
        if (password.length >= 8 && !sharingUIMode) {
          checkBreach(password);
        } else {
          breachWarning.classList.add("hidden");
          breachCheckLoading.classList.add("hidden");
        }
      });

      // Password visibility toggle
      keyInput.addEventListener("input", () => {
        togglePassword.classList.toggle("show", keyInput.value.length > 0);
      });

      togglePassword.addEventListener("click", () => {
        if (keyInput.type === "password") {
          keyInput.type = "text";
          toggleIcon.classList.remove("ph-eye");
          toggleIcon.classList.add("ph-eye-slash");
        } else {
          keyInput.type = "password";
          toggleIcon.classList.remove("ph-eye-slash");
          toggleIcon.classList.add("ph-eye");
        }
      });

      // Event listener for the reset button
      resetFormBtn.addEventListener("click", () => {
        payloadInput.value = "";
        keyInput.value = "";
        saltyResultDiv.classList.add("hidden");
        strengthIndicator.classList.add("hidden");
        breachWarning.classList.add("hidden");
        breachCheckLoading.classList.add("hidden");
        togglePassword.classList.remove("show");

        // Clear breach check timer
        if (breachCheckTimer) {
          clearTimeout(breachCheckTimer);
        }

        // Reset sharing UI mode and restore normal UI
        if (sharingUIMode) {
          sharingUIMode = false;
          const generateBtn = document.getElementById(
            "generatePasswordBtn",
          );
          if (generateBtn) generateBtn.style.display = "";
        }

        // Clear URL parameters
        const cleanUrl = window.location.pathname;
        window.history.replaceState({}, document.title, cleanUrl);

        showMessageBox(i18n.messages.formReset);
      });

      // Help modal functionality
      const modal = document.getElementById("helpModal");
      const openModalBtn = document.getElementById("openModalBtn");
      const closeModalBtn = document.querySelector(".close-button");

      openModalBtn.addEventListener("click", () => {
        modal.classList.remove("hidden");
      });

      closeModalBtn.addEventListener("click", () => {
        modal.classList.add("hidden");
      });

      // Close modal when clicking outside
      window.addEventListener("click", (event) => {
        if (event.target === modal) {
          modal.classList.add("hidden");
        }
        if (event.target === passwordModal) {
          passwordModal.classList.add("hidden");
        }
        if (event.target === qrModal) {
          qrModal.classList.add("hidden");
        }
      });

      // Password generator modal functionality
      generatePasswordBtn.addEventListener("click", () => {
        // Load current excluded symbols
        excludeSymbols.value = hasCustomExcludedSymbols()
          ? getExcludedSymbols()
          : "";
        passwordModal.classList.remove("hidden");
      });

      passwordModalClose.addEventListener("click", () => {
        passwordModal.classList.add("hidden");
      });

      // Password type switching
      dicewareBtn.addEventListener("click", () => {
        dicewareBtn.classList.add("active");
        randomBtn.classList.remove("active");
        dicewareOptions.classList.remove("hidden");
        randomOptions.classList.add("hidden");
      });

      randomBtn.addEventListener("click", () => {
        randomBtn.classList.add("active");
        dicewareBtn.classList.remove("active");
        randomOptions.classList.remove("hidden");
        dicewareOptions.classList.add("hidden");
      });

      // Password length slider
      passwordLength.addEventListener("input", (e) => {
        lengthValue.textContent = e.target.value;
      });

      // Generated password visibility toggle
      toggleGeneratedPassword.addEventListener("click", () => {
        const icon = toggleGeneratedPassword.querySelector("i");
        if (generatedPassword.type === "password") {
          generatedPassword.type = "text";
          icon.classList.remove("ph-eye");
          icon.classList.add("ph-eye-slash");
        } else {
          generatedPassword.type = "password";
          icon.classList.remove("ph-eye");
          icon.classList.add("ph-eye-slash");
        }
      });

      // Copy generated password
      copyGeneratedPassword.addEventListener("click", async () => {
        try {
          await navigator.clipboard.writeText(generatedPassword.value);
          showMessageBox(i18n.messages.copied);
        } catch (error) {
          showMessageBox(i18n.messages.failedToCopy, true);
        }
      });

      // Save excluded symbols when changed
      excludeSymbols.addEventListener("change", () => {
        setExcludedSymbols(excludeSymbols.value);
      });

      // Generate password button in modal
      generatePasswordModalBtn.addEventListener("click", async () => {
        try {
          const isDiceware = dicewareBtn.classList.contains("active");
          let password;

          if (isDiceware) {
            const wordCount = parseInt(dicewareWords.value);
            password = await generatePassword("diceware", { wordCount });
          } else {
            const options = {
              length: parseInt(passwordLength.value),
              includeNumbers: includeNumbers.checked,
              includeSymbols: includeSymbols.checked,
              excludeSymbols: excludeSymbols.value || getExcludedSymbols(),
            };
            password = await generatePassword("random", options);
          }

          generatedPassword.value = password;
          generatedPasswordSection.classList.remove("hidden");

          // Update modal strength indicator using shared function
          updatePasswordStrength(password, {
            container: modalStrengthIndicator,
            label: modalStrengthLabel,
            bar: modalStrengthBar,
            entropy: modalEntropyBits,
            crackTime: modalCrackTime,
          });
        } catch (error) {
          showMessageBox(
            i18n.messages.encryptionError + error.message,
            true,
          );
        }
      });

      // Use password button
      usePasswordBtn.addEventListener("click", () => {
        if (generatedPassword.value) {
          keyInput.value = generatedPassword.value;
          keyInput.type = "password";
          toggleIcon.classList.remove("ph-eye");
          toggleIcon.classList.add("ph-eye-slash");
          togglePassword.classList.add("show");
          passwordModal.classList.add("hidden");

          // Update main form strength indicator
          updatePasswordStrength(generatedPassword.value, {
            container: strengthIndicator,
            label: strengthLabel,
            bar: strengthBar,
            entropy: entropyBits,
            crackTime: crackTime,
          });

          // Check for breaches
          checkBreach(generatedPassword.value);
        }
      });

      // QR code modal functionality
      showQrBtn.addEventListener("click", () => {
        const url = shareUrlInput.value;
        if (url) {
          // Clear any existing QR code
          const qrcodeDiv = document.getElementById("qrcode");
          qrcodeDiv.innerHTML = "";

          // Generate new QR code
          qrcode = new QRCode(qrcodeDiv, {
            text: url,
            width: 256,
            height: 256,
            colorDark: "#000000",
            colorLight: "#ffffff",
            correctLevel: QRCode.CorrectLevel.H,
          });

          qrModal.classList.remove("hidden");
        }
      });

      qrModalClose.addEventListener("click", () => {
        qrModal.classList.add("hidden");
      });

      closeQrBtn.addEventListener("click", () => {
        qrModal.classList.add("hidden");
      });

      // Handle form submission
      form.addEventListener("submit", async (e) => {
        e.preventDefault();

        const payload = payloadInput.value.trim();
        const key = keyInput.value;

        if (!payload || !key) {
          return;
        }

        try {
          const cryptoKey = await salty_key(key);
          let result;
          let operationType;

          if (isSaltyCipher(payload)) {
            // Decrypt
            result = await salty_decrypt(payload, cryptoKey);
            if (result === null) {
              throw new Error(i18n.messages.decryptionError);
            }
            operationType = i18n.results.decrypted;
            shareUrlSection.classList.add("hidden");
          } else {
            // Encrypt
            result = await salty_encrypt(payload, cryptoKey);
            operationType = i18n.results.encrypted;

            // Create shareable URL
            const shareUrl = `${window.location.origin}${
              window.location.pathname
            }?payload=${encodeURIComponent(result)}`;
            shareUrlInput.value = shareUrl;
            shareUrlSection.classList.remove("hidden");
          }

          // Format the result for display
          const formattedResult = operationType === i18n.results.encrypted
            ? `-----BEGIN SALTY MESSAGE-----\n${result}\n-----END SALTY MESSAGE-----`
            : result;

          operationTypeSpan.textContent = operationType;
          shareableCipherTextarea.value = formattedResult;
          compressedCipherTextarea.value = result;
          saltyResultDiv.classList.remove("hidden");

          // Clear password strength indicator after successful operation
          strengthIndicator.classList.add("hidden");
          breachWarning.classList.add("hidden");
          breachCheckLoading.classList.add("hidden");
        } catch (error) {
          console.error("Crypto operation failed:", error);
          showMessageBox(
            error.message || i18n.messages.operationError,
            true,
          );
        }
      });

      // Copy functionality
      document.querySelectorAll(".copyBtn").forEach((btn) => {
        btn.addEventListener("click", async () => {
          const targetId = btn.getAttribute("data-target");
          const targetElement = document.getElementById(targetId);

          try {
            await navigator.clipboard.writeText(targetElement.value);
            showMessageBox(i18n.messages.copied);
          } catch (error) {
            showMessageBox(i18n.messages.failedToCopy, true);
          }
        });
      });

      // Copy share URL button
      copyShareUrlBtn.addEventListener("click", async () => {
        try {
          await navigator.clipboard.writeText(shareUrlInput.value);
          showMessageBox(i18n.messages.shareUrlCopied);
        } catch (error) {
          showMessageBox(i18n.messages.failedToCopy, true);
        }
      });

      // Check for URL parameters
      function getQueryParam(param) {
        const urlParams = new URLSearchParams(window.location.search);
        return urlParams.get(param);
      }

      // Check for initial payload in URL
      document.addEventListener("DOMContentLoaded", () => {
        // Check for sharing UI mode
        const suiParam = getQueryParam("sui");
        if (suiParam === "1") {
          sharingUIMode = true;

          // Hide password generator button
          const generateBtn = document.getElementById(
            "generatePasswordBtn",
          );
          if (generateBtn) generateBtn.style.display = "none";

          // The strength indicator and breach warnings will be hidden by the flag checks
        }

        const urlPayload = getQueryParam("payload");
        if (urlPayload) {
          payloadInput.value = decodeURIComponent(urlPayload);
        }
      });
    </script>
  </body>
</html>
