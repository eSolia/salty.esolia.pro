import { TemplateFormat } from "@rick/nagare/types";
import type { NagareConfig } from "@rick/nagare/types";

export default {
  project: {
    name: "Salty",
    description: "Browser-Native Secure Text Encryption",
    repository: "https://github.com/esolia/salty.esolia.pro",
    homepage: "https://salty.esolia.pro",
    license: "MIT",
    author: "Rick Cogley, eSolia Inc.",
  },

  versionFile: {
    path: "./version.ts",
    template: TemplateFormat.TYPESCRIPT_EXTENDED, // Use built-in extended template
    /*customTemplate: `/**
 * @fileoverview Centralized version and metadata information for Salty
 * @description Single source of truth for all version-related information
 * 
 * THIS FILE IS AUTO-GENERATED BY NAGARE - DO NOT EDIT DIRECTLY
 * To update version information, use: deno task release:[patch|minor|major]
 * Template defined in: nagare.config.ts
 * 
 * @generated by Nagare v1.7.3
 * @see https://github.com/esolia/salty.esolia.pro/blob/main/nagare.config.ts
 */

/**
 * Application version information
 */
export const VERSION = "{{ version }}";

/**
 * Build and deployment metadata
 */
export const BUILD_INFO = {
  buildDate: "{{ buildDate }}",
  gitCommit: "{{ gitCommit }}",
  buildEnvironment: "{{ environment }}",
  versionComponents: {
    major: {{ versionComponents.major }},
    minor: {{ versionComponents.minor }},
    patch: {{ versionComponents.patch }},
    prerelease: {{ if versionComponents.prerelease }}"{{ versionComponents.prerelease }}"{{ else }}null{{ /if }}
  }
} as const;

/**
 * Application metadata
 */
export const APP_METADATA = {
  name: "Salty",
  description: "Browser-Native Secure Text Encryption",
  author: "Rick Cogley, eSolia Inc.",
  license: "MIT",
  repository: "https://github.com/esolia/salty.esolia.pro",
  homepage: "https://salty.esolia.pro"
} as const;

/**
 * Technical specifications
 */
export const TECH_SPECS = {
  platform: "Deno Deploy",
  runtime: "Deno",
  cryptoFeatures: [
    "AES-GCM-256 encryption",
    "PBKDF2-SHA512 key derivation",
    "600,000 iterations",
    "basE91 encoding",
    "Web Crypto API"
  ],
  securityFeatures: [
    "Rate limiting (20 requests/hour)",
    "Input validation",
    "Security headers (CSP, HSTS, XSS)",
    "API authentication",
    "Structured logging",
    "Request size limits"
  ],
  endpoints: [
    "/",
    "/en/",
    "/api/encrypt",
    "/api/decrypt",
    "/health",
    "/salty.ts"
  ]
} as const;

/**
 * Security configuration information
 */
export const SECURITY_INFO = {
  rateLimiting: {
    window: "1 hour",
    maxRequests: 20
  },
  maxPayloadSize: "1MB",
  maxKeySize: "1KB",
  securityHeaders: [
    "Content-Security-Policy",
    "Strict-Transport-Security",
    "X-Content-Type-Options",
    "X-Frame-Options",
    "X-XSS-Protection",
    "Referrer-Policy"
  ]
} as const;

/**
 * Release notes for the current version
 */
export const RELEASE_NOTES = {{ releaseNotes |> jsonStringify |> safe }} as const;

/**
 * Version utility functions
 */
export class VersionUtils {
  /**
   * Get the full version string with build metadata
   */
  static getExtendedVersion(): string {
    const { major, minor, patch, prerelease } = BUILD_INFO.versionComponents;
    let version = \`\${major}.\${minor}.\${patch}\`;
    if (prerelease) {
      version += \`-\${prerelease}\`;
    }
    return \`\${version}+\${BUILD_INFO.gitCommit}\`;
  }

  /**
   * Get detailed version information
   */
  static getDetailedInfo() {
    return {
      version: VERSION,
      extended: this.getExtendedVersion(),
      buildDate: BUILD_INFO.buildDate,
      commit: BUILD_INFO.gitCommit,
      environment: BUILD_INFO.buildEnvironment,
      components: BUILD_INFO.versionComponents
    };
  }

  /**
   * Check if this is a prerelease version
   */
  static isPrerelease(): boolean {
    return BUILD_INFO.versionComponents.prerelease !== null;
  }

  /**
   * Get release type
   */
  static getReleaseType(): string {
    if (this.isPrerelease()) {
      return BUILD_INFO.versionComponents.prerelease || "prerelease";
    }
    return "stable";
  }
}
`,*/
  },

  // Much simpler with Nagare 1.1.0 - just list the files!
  updateFiles: [
    { path: "./deno.json" }, // Auto-detected and handled by built-in handler
    { path: "./README.md" }, // Auto-detected and handled by built-in handler
  ],

  // Configure GitHub release
  github: {
    owner: "esolia",
    repo: "salty.esolia.pro",
    createRelease: true,
  },
} satisfies NagareConfig;
