import { TemplateFormat } from "@rick/nagare/types";
import type { NagareConfig } from "@rick/nagare/types";

export default {
  project: {
    name: "Salty",
    description: "Browser-Native Secure Text Encryption",
    repository: "https://github.com/esolia/salty.esolia.pro",
    homepage: "https://salty.esolia.pro",
    license: "MIT",
    author: "Rick Cogley, eSolia Inc.",
  },

  versionFile: {
    path: "./version.ts",
    template: TemplateFormat.CUSTOM,
    customTemplate: `/**
 * Version information for {{ project.name }}
 * Generated by Nagare on {{ buildDate }}
 */

export const VERSION = "{{ version }}";

export const BUILD_INFO = {
  buildDate: "{{ buildDate }}",
  gitCommit: "{{ gitCommit }}",
  buildEnvironment: "{{ environment }}",
  versionComponents: {
    major: {{ versionComponents.major |> safe }},
    minor: {{ versionComponents.minor |> safe }},
    patch: {{ versionComponents.patch |> safe }},
    prerelease: {{ if versionComponents.prerelease }}{{ versionComponents.prerelease |> jsonStringify |> safe }}{{ else }}null{{ /if }},
  },
} as const;

export const APP_INFO = {
  name: "{{ project.name }}",
  description: "{{ project.description }}",
  repository: "{{ project.repository }}",
  {{- if project.author }}
  author: "{{ project.author }}",
  {{- /if }}
  {{- if project.homepage }}
  homepage: "{{ project.homepage }}",
  {{- /if }}
  {{- if project.license }}
  license: "{{ project.license }}",
  {{- /if }}
} as const;
{{- if metadata }}
export const APP_METADATA = {{ metadata |> jsonStringify |> safe }} as const;
{{- else }}
export const APP_METADATA = {} as const;
{{- /if }}
{{- if releaseNotes }}
export const RELEASE_NOTES = {{ releaseNotes |> jsonStringify |> safe }} as const;
{{- else }}
export const RELEASE_NOTES = {} as const;
{{- /if }}

// Tech specifications used by the application
export const TECH_SPECS = {
  platform: "Deno Deploy",
  runtime: "Deno",
  cryptoFeatures: [
    "AES-GCM-256 encryption",
    "PBKDF2-SHA512 key derivation",
    "600,000 iterations",
    "basE91 encoding",
    "Web Crypto API",
  ],
  securityFeatures: [
    "Rate limiting",
    "Input validation",
    "Security headers",
    "API authentication",
    "Request size limits",
    "Structured logging",
    "Security event tracking",
  ],
  endpoints: [
    { path: "/", description: "Japanese UI" },
    { path: "/en/", description: "English UI" },
    { path: "/api/encrypt", method: "POST", description: "Encrypt endpoint" },
    { path: "/api/decrypt", method: "POST", description: "Decrypt endpoint" },
    { path: "/health", method: "GET", description: "Health check endpoint" },
  ],
} as const;

// Security information for the application
export const SECURITY_INFO = {
  rateLimiting: {
    window: "1 hour",
    maxRequests: 20,
  },
  maxPayloadSize: "1MB",
  maxKeySize: "1KB",
  securityHeaders: [
    "Content-Security-Policy",
    "Strict-Transport-Security",
    "X-Content-Type-Options",
    "X-Frame-Options",
    "X-XSS-Protection",
    "Referrer-Policy",
  ],
} as const;

// Version utility class
export class VersionUtils {
  static getExtendedVersion(): string {
    return \`\${VERSION} (Built: \${BUILD_INFO.buildDate})\`;
  }

  static getDetailedInfo() {
    return {
      version: VERSION,
      build: BUILD_INFO,
      app: APP_INFO,
      specs: TECH_SPECS,
      security: SECURITY_INFO,
    };
  }

  static isPrerelease(): boolean {
    return BUILD_INFO.versionComponents.prerelease !== null;
  }

  static getReleaseType(): string {
    if (this.isPrerelease()) {
      return "prerelease";
    }
    return "stable";
  }
}
`,
  },

  // Much simpler with Nagare 1.1.0+ - just list the files!
  updateFiles: [
    { path: "./deno.json" }, // Auto-detected and handled by built-in handler
    { path: "./README.md" }, // Auto-detected and handled by built-in handler
  ],

  // Configure GitHub release
  github: {
    owner: "esolia",
    repo: "salty.esolia.pro",
    createRelease: true,
  },
} satisfies NagareConfig;
