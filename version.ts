/**
 * Version information for Salty
 * Generated by Nagare on 2025-07-04T04:53:40.536Z
 */

export const VERSION = "2.2.2";

export const BUILD_INFO = {
  buildDate: "2025-07-04T04:53:40.536Z",
  gitCommit: "30174ec",
  buildEnvironment: "production",
  versionComponents: {
    major: 2,
    minor: 2,
    patch: 2,
    prerelease: null,
  },
} as const;

export const APP_INFO = {
  name: "Salty",
  description: "Browser-Native Secure Text Encryption",
  repository: "https://github.com/esolia/salty.esolia.pro",
  author: "Rick Cogley, eSolia Inc.",
  homepage: "https://salty.esolia.pro",
  license: "MIT",
} as const;
export const APP_METADATA = {} as const;
export const RELEASE_NOTES = {
  "version": "2.2.2",
  "date": "2025-07-04",
  "added": [
    "add Vento templating system for maintainable HTML generation (236ac24)",
    "replace Font Awesome with Phosphor icons and improve UI (c34a204)",
    "add sui parameter for cleaner sharing UI (bb4b5af)",
    "make 3-word diceware passphrases rank as 'Good' (0a209d8)",
    "add excluded symbols feature and dynamic wordlist loading (7f7e0f8)",
    "add password generator with visibility toggle (efccbb9)",
  ],
  "changed": [
    "bump version to 2.2.1 (30174ec)",
    "update documentation for sui parameter (e6f9a0b)",
    "add comprehensive password generator test suite (5839cea)",
  ],
  "deprecated": [],
  "removed": [],
  "fixed": [
    "format HTML output from build script to prevent release issues (22ed72d)",
    "exclude HTML files from deno fmt to prevent release issues (c5120e9)",
    "ensure HTML files have trailing newlines after build (1968a31)",
    "add cdn.jsdelivr.net to font-src CSP for Phosphor fonts (90bfbdc)",
    "update CSP to allow Phosphor icons and add planning doc (4dd3e38)",
    "hide browser's native password reveal button to prevent duplicates (732902f)",
    "simplify strength indicator to always use analyzePasswordStrength (bb58445)",
    "make password generator modal use same strength analyzer as main form (df5d7ec)",
    "correct entropy calculation for diceware passphrases (7da3f16)",
    "respect user's excluded symbols preferences (537cb09)",
    "add test-password-generator.html to allowed static files (e043a48)",
    "add CodeQL/LGTM suppression comments for false positives (77ecc1f)",
    "update DevSkim suppression comments to inline format (a5ab155)",
    "address code scanning security alerts (442f62f)",
    "replace deprecated window with globalThis for Deno 2.0 compatibility (13f8181)",
    "improve diceware entropy with proper 10k+ word list (7e6422d)",
    "improve password generator UX and entropy calculation consistency (253d18f)",
    "correct favicon.ico path check to include leading slash (dfe4246)",
    "update CSP to allow Font Awesome kit domains (e8e0db3)",
    "update Font Awesome kit ID to correct value (96e995b)",
    "add POST method to forms to prevent key exposure in URL (dc5a4a5)",
    "add transpilation handlers for password-strength and hibp-checker modules (6bebddd)",
  ],
  "security": [],
} as const;

// Additional exports configured in nagare.config.ts

/** Tech specifications used by the application */
export const TECH_SPECS = {
  "platform": "Deno Deploy",
  "runtime": "Deno",
  "cryptoFeatures": [
    "AES-GCM-256 encryption",
    "PBKDF2-SHA512 key derivation",
    "600,000 iterations",
    "basE91 encoding",
    "Web Crypto API",
  ],
  "securityFeatures": [
    "Rate limiting",
    "Input validation",
    "Security headers",
    "API authentication",
    "Request size limits",
    "Structured logging",
    "Security event tracking",
  ],
  "endpoints": [
    {
      "path": "/",
      "description": "Japanese UI",
    },
    {
      "path": "/en/",
      "description": "English UI",
    },
    {
      "path": "/api/encrypt",
      "method": "POST",
      "description": "Encrypt endpoint",
    },
    {
      "path": "/api/decrypt",
      "method": "POST",
      "description": "Decrypt endpoint",
    },
    {
      "path": "/health",
      "method": "GET",
      "description": "Health check endpoint",
    },
  ],
} as const;

/** Security information for the application */
export const SECURITY_INFO = {
  "rateLimiting": {
    "window": "1 hour",
    "maxRequests": 20,
  },
  "maxPayloadSize": "1MB",
  "maxKeySize": "1KB",
  "securityHeaders": [
    "Content-Security-Policy",
    "Strict-Transport-Security",
    "X-Content-Type-Options",
    "X-Frame-Options",
    "X-XSS-Protection",
    "Referrer-Policy",
  ],
} as const;

/** Version utility class */
export class VersionUtils {
  static getExtendedVersion(): string {
    return `${VERSION} (Built: ${BUILD_INFO.buildDate})`;
  }

  static getDetailedInfo() {
    return {
      version: VERSION,
      build: BUILD_INFO,
      app: APP_INFO,
      specs: TECH_SPECS,
      security: SECURITY_INFO,
    };
  }

  static isPrerelease(): boolean {
    return BUILD_INFO.versionComponents.prerelease !== null;
  }

  static getReleaseType(): string {
    if (this.isPrerelease()) {
      return "prerelease";
    }
    return "stable";
  }
}
